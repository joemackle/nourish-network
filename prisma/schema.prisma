generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserGroup {
    DONOR
    RECIPIENT
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id         String    @id @default(cuid())
  username   String    @unique
  email      String    @unique
  createdAt  DateTime  @default(now())
  password   String
  group      UserGroup
  posts      Post[]
  likedPosts LikedPost[]

  accounts   Account[]
  sessions   Session[]
}

model Post {
  id          String      @id @default(cuid())
  title       String
  content     String?
  date        DateTime
  location    String
  createdAt   DateTime    @default(now())
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  likedBy     LikedPost[]
}

model LikedPost {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  post     Post     @relation(fields: [postId], references: [id])
  postId   String

  @@id([userId, postId])
}

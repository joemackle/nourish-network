generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id         String      @id @default(cuid())
  username   String      @unique
  email      String      @unique
  createdAt  DateTime    @default(now())
  group      UserGroup
  password   String      @db.VarChar(72)
  updatedAt  DateTime    @updatedAt
  accounts   Account[]
  likedPosts LikedPost[]
  posts      Post[]
  sessions   Session[]
}

model Post {
  id        String      @id @default(cuid())
  title     String
  date      DateTime
  location  String
  createdAt DateTime    @default(now())
  authorId  String
  content   String?
  likedBy   LikedPost[]
  author    User        @relation(fields: [authorId], references: [id])
}

model LikedPost {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

enum UserGroup {
  DONOR
  RECIPIENT
}
